on:
  push:
    branches:
    - '*'
    - '!release'
    tags:
    - 'v*'
name: Pipeline
jobs:
  test-linux:
    name: "Linux Test"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        suite: [centos]
    steps:
    - uses: actions/checkout@v4
    - name: Checkout submodules
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: manage ci
      run: |
        ./manage trust-escapace
        ./manage ci
      env:
        TEST_SUITE: ${{ matrix.suite }}
  # docker:
  #   name: "Docker build and push"
  #   runs-on: ubuntu-latest
  #   needs: [test-linux]
  #   steps:
  #   - uses: actions/checkout@v4
  #     if: contains(github.ref, 'tags/v')
  #   - name: Checkout submodules
  #     if: contains(github.ref, 'tags/v')
  #     shell: bash
  #     run: |
  #       auth_header="$(git config --local --get http.https://github.com/.extraheader)"
  #       git submodule sync --recursive
  #       git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
  #   - name: Docker Build & Push
  #     if: contains(github.ref, 'tags/v')
  #     shell: bash
  #     run: |
  #       echo ${DOCKER_ACCESS_TOKEN} | docker login -u ${DOCKER_USERNAME} --password-stdin
  #       docker build -t escapace/manage:latest -t escapace/manage:${GITHUB_REF:11} .
  #       docker push escapace/manage:latest
  #       docker push escapace/manage:${GITHUB_REF:11}
  #     env:
  #       DOCKER_ACCESS_TOKEN: ${{ secrets.DOCKER_ACCESS_TOKEN }}
  #       DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  release:
    name: "Github Release"
    runs-on: ubuntu-latest
    needs: [test-linux]
    steps:
    - uses: actions/checkout@v4
      if: contains(github.ref, 'tags/v')
    - name: Checkout submodules
      if: contains(github.ref, 'tags/v')
      shell: bash
      run: |
        auth_header="$(git config --local --get http.https://github.com/.extraheader)"
        git submodule sync --recursive
        git -c "http.extraheader=$auth_header" -c protocol.version=2 submodule update --init --force --recursive --depth=1
    - name: release
      if: contains(github.ref, 'tags/v')
      run: |
        gh release create v${GITHUB_REF:11} \
          --repo "${GITHUB_REPOSITORY}"
