#!/usr/bin/env bash

[[ $MANAGE_LOADED ]] && return

source collection-shell
source collection-string
source collection-message
source collection-tag
source collection-array

_topicExists () {
    _includes _topicNames "$*"
}

_topicIndexOf () {
    _indexOf _topicNames "$*"
}

_topicCount () {
    _count _topicNames
}

_forEachTopic () {
    _forEach _topicNames "$*"
}

_getTopic () {
    _get _topicNames "$*"
}

_getTopicDoc () {
    _doc "$(_get _topicPaths "$*")"
}

_getTopicExtendedDoc () {
    _docExtended "$(_get _topicPaths "$*")"
}

_docExtended () {
    _embeddedTag "doc" "$@"
}

_doc () {
    local doc line
    doc="$(_embeddedTag "doc" "$@")"
    if [[ "${doc}" =~ ^([A-Z]{1,}[^.]*.) ]]
    then
        line="${BASH_REMATCH[1]}"
    elif [[ "${doc}" =~ ^([^.]*.) ]]
    then
        line="${BASH_REMATCH[1]}"
    fi
    if [ -n "${line}" ]
    then
        echo "${line}" | sed ':a;N;$!ba;s/\n/ /g'
    fi
}

_usageHeaderPath () {
    if [ -n "$*" ]
    then
        _HEADERPATH="$*"
    else
        if [ -n "${_HEADERPATH}" ]
        then
            echo "${_HEADERPATH}"
        else
            echo "${MANAGEPATH}"
        fi
    fi
}

_usageHeader () {
    local doc
    doc="$(_doc "$(_usageHeaderPath)")"

    [ -n "${doc}" ] && echo -e "${doc}\n"

    echo -e "General Options"
    printf "  %-15s %10s\n" "-v" "Be verbose."
    printf "  %-15s %10s\n" "-h [subcommand]" "Display the help message."
    echo
}

_usageSubcommandLine () {
    printf "  %-15s %10s\n" "$(_getTopic "$@")" "$(_getTopicDoc "$@")"
}

_usageSubcommand () {
    local index
    index="$(_topicIndexOf "$*")"
    echo "Usage: $(basename "$0") [-vh] $* [<args>]"
    _getTopicExtendedDoc "${index}"
}

_usageSubcommands () {
    [[ "$(_topicCount)" != 0 ]] &&
    echo -e "Subcommands"        &&
    _forEachTopic _usageSubcommandLine
}

_usage () {
    if _topicExists "$*"
    then
        _usageSubcommand "$*"
    else
        _usageHeader
        _usageSubcommands
    fi
}

_harvest() {
    local file

    for file in "$1"/*
    do
        if [   -f "${file}" ] &&
           [   -r "${file}" ] &&
           [ ! -L "${file}" ] &&
           [[ "$(basename "${file}")" =~ ^[-a-zA-Z]*$ ]]
        then
            _topicPaths+=("${file}")
            _topicNames+=("$(basename "${file}")")
        else
            _warn "Omiting the script \"$(basename "${file}")\"."
        fi
    done
}

_wrapper () {
    local index="$1"
    local topic=${_topicNames[$index]}
    local path=${_topicPaths[$index]}
    local bashcommand
    shift

    MANAGETOPIC="${topic}"
    MANAGEIMPORTS="$(_embeddedTag "import" "${path}")"

    export MANAGEIMPORTS
    export MANAGETOPIC

    bashcommand="$(echo -n \
                   VERBOSE="${VERBOSE}" \
                   MANAGEDIRECTORY="${MANAGEDIRECTORY}" \
                   MANAGEINIT="${MANAGEINIT}" \
                   MANAGETOPIC="${MANAGETOPIC}" \
                   MANAGEIMPORTS=\""${MANAGEIMPORTS}"\" \
                   source "${MANAGEPATH}" \&\& \
                   source "${path}" \&\& \
                   "main" "$@"
                 )"

    bash -c "${bashcommand}"
}

_run () {
    local topic="$1"

    if _topicExists "${topic}"
    then
        shift
        _wrapper "$(_topicIndexOf "${topic}")" "$@"
    else
        _usage
    fi
}

_flags () {
    case $@ in
        h|\?)
            _usage "${OPTARG}"
            exit 0
            ;;
        v)
            _verbose 1
            ;;
        :)
            if [ "${OPTARG}" == "h" ]
            then
                _usage
                exit 0
            else
                echo "Option -$OPTARG requires an argument." >&2
                exit 1
            fi
            ;;
    esac
}

_topicNames=()
_topicPaths=()

MANAGE_LOADED=1
