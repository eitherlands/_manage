#!/usr/bin/env bash

swaprun () {
    local name
    local names
    names=("$1" "_manage_$1")
    shift

    for name in "${names[@]}"
    do
        if exists "${name}"
        then
            break
        fi
    done

    prepare "${name}" "$@"
}

run () {
    local name="$1"

    if [[ "${name}" == "completion" ]] ||
       [[ "${name}" == "init"       ]] ||
       _ includes MANAGEPUBLIC "${name}"
    then
        swaprun "$@"
    elif exists "${name}"
    then
        shift
        prepare "${name}" "$@"
    else
        name="$(yml default || echo help)"

        if exists "${name}"
        then
            prepare "${name}" "$@"
        elif _ includes MANAGEPUBLIC "${name}"
        then
            swaprun "${name}" "$@"
        else
            _ die "The default script \"${name}\" defined in .manage.yml does not exist."
        fi
    fi
}

getenv ()
{
    if declare -f "yml" > /dev/null 2>&1
    then
        local keys
        local key
        keys="$(yml __keys || echo)"
        for key in ${keys}
        do
            if [[ "${key}" =~ ^env_.* ]]
            then
                echo "$(_ upper <<< "${key#env_}")=\"$(yml "${key}" || echo)\""
            fi
        done
    fi
}

prepare () {
    local name
    local path
    local imports
    local code=0

    name="${1}"
    path="$(getpath "${name}")"
    shift || true

    if isinternal "${name}"
    then
        source "${path}"

        if [ -n "${MANAGECOMPLETION}" ]
        then
            if declare -f "completion" > /dev/null 2>&1
            then
                completion "$@" || code=$?
                MANAGECOMPLETION=""
            fi
        else
            main "$@" || code=$?
        fi

        cachescripts || true
    else
        local zero
        local exports=""
        local commandstring

        checkscriptdependencies "${path}"

        # shellcheck disable=SC2034
        imports=($(_ tag "import" "${path}"))

        zero="$(basename "${MANAGEZERO}")"
        libexec="source \"${MANAGEDIRECTORY}/libexec/manage\""

        if [ ! -z "${MANAGETESTDIRECTORY}" ]
        then
             exports+="MANAGETESTDIRECTORY=\"${MANAGETESTDIRECTORY}\" "
        fi

        if [ ! -z "${MANAGECOMPLETION}" ]
        then
            exports+="MANAGECOMPLETION=\"${MANAGECOMPLETION}\" "
        fi

        exports+="$(getenv) "

        exports+="MANAGEDIRECTORY=\"${MANAGEDIRECTORY}\"
                  MANAGEREPOSITORY=\"${MANAGEREPOSITORY}\"
                  MANAGESCRIPTPATH=\"${path}\"
                  MANAGEZERO=\"${MANAGEZERO}\"
                  MANAGEIMPORT=\"$(_ join imports ' ')\""

        commandstring="$(echo "${exports} && ${libexec}" | tr '\n' ' ' | _ squeeze )"

        exec -a "${zero}"           \
            "bash"                  \
            "--norc"                \
            "--noprofile"           \
            "-c" "${commandstring}" \
            "${zero}"               \
            "$@"

    fi

    exit "${code}"
}

processsinglescript ()
{
    local file

    if isscript "${1}"
    then
        file="$(expandpath "$1")"
        SCRIPTPATHS+=("${file}")
        SCRIPTNAMES+=("${2}$(basename "${file}")")
    else
        return 1
    fi
}

processscriptordirectory () {
    local file

    if isdirectory "$1"
    then
        for file in "$1"/* "$1"/**/*
        do
            if  [[ "$(dirname "${file}")" != "${MANAGETESTDIRECTORY}" ]]
            then
                processsinglescript "${file}" "$2" || true
            fi
        done
    elif isfile "$1"
    then
        processsinglescript "$1" "$2" || return 1
    else
        return 1
    fi
}

processyaml () {
    eval "$(_ yaml "${MANAGEREPOSITORY}/.manage.yml" "yml")"

    MANAGESCRIPTDIRECTORY="$(yml scripts || echo script)"

    [ -z "${MANAGEPUBLIC}" ] &&
        MANAGEPUBLIC=($(yml enable || echo -e "help\ntest"))

    if _ includes MANAGEPUBLIC "test"
    then
        MANAGETESTDIRECTORY="${MANAGEREPOSITORY}/$(yml test_tests || echo "script/test")"
    fi

    checkdependencies "$(yml dependencies || echo)"
}

proceedwithrepository ()
{
    if isscript "$1"
    then
        searchpath "$1" && processyaml

        processscriptordirectory "$1"
        shift
        run "${SCRIPTNAMES[0]}" "$@"
    else
        if isrepository "$1"
        then
            shift
        fi

        processscriptordirectory "${MANAGEDIRECTORY}/script" "_manage_"

        processyaml

        if [[ ${MANAGEREPOSITORY} != "${MANAGEDIRECTORY}" ]]
        then
            processscriptordirectory "${MANAGEREPOSITORY}/${MANAGESCRIPTDIRECTORY}" ||
                _ die "Cannot find ${MANAGEREPOSITORY}/${MANAGESCRIPTDIRECTORY}, aborting."
        fi

        run "$@"
    fi
}

isrepository ()
{
    _ required "$1" ||
        return 1

    [[ "$1" == "${MANAGELIBEXEC}"   ]] && return 1
    [[ "$1" == "${MANAGEDIRECTORY}" ]] && return 1

    isdirectory "$1" || return 1
    isfile "$1/.manage.yml" || return 1

    MANAGEREPOSITORY="$(expandpath "$1")"
}

searchpath ()
{
    _ required "$1" || return 1
    local path
    local code=1

    for path in "$@"
    do
        while [ -n "${path}"     ] &&
              [ "${path}" != "/" ] &&
              [ "${path}" != "." ]
        do
            if isrepository "${path}"
            then
                code=0
                break
            else
                path="$(dirname "${path}")"
            fi
        done
        [ "${code}" == "0" ] && break
    done

    return "${code}"
}

proceedwithmanage () {
    if [[ "${MANAGECWD}" == "${MANAGEDIRECTORY}" ]]
    then
        MANAGEPUBLIC=(
                       "help"
                       "test"
                       "init"
                       "build"
                       "assemble"
                       "versions"
                       "shellcheck"
                     )
    else
        # TODO: help message
        MANAGEPUBLIC=(
                       "bootstrap"
                       "help"
                       "init"
                     )
    fi

    MANAGEREPOSITORY="${MANAGEDIRECTORY}"
    proceedwithrepository "$@"
}

collectscripts ()
{
    local callerdirectory
    local paths
    callerdirectory="$(dirname "$(expandpath "${MANAGEZERO}")")"
    paths=( "${callerdirectory}" "$1" "${MANAGECWD}" )

    if searchpath "${paths[@]}"
    then
        proceedwithrepository "$@"
    else
        proceedwithmanage "$@"
    fi
}
