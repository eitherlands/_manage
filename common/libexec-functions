#!/usr/bin/env bash

exists () {
    _ includes SCRIPTNAMES "$1"
}

getindex () {
    _ indexOf SCRIPTNAMES "$1"
}

getpath ()
{
    echo "${SCRIPTPATHS["$(getindex "$1")"]}"
}

getscript ()
{
    echo "${SCRIPTNAMES["$(getindex "$1")"]}"
}

getdoc () {
    _ tag "doc" \
        "$(getpath "$1")"
}

isurl ()
{
    #TODO: regex
    false
}

isfile ()
{
    local file="$1"

    [ -f  "${file}" ] &&
    [ -r  "${file}" ] ||
        return 1
}

isdirectory ()
{
    [ -d "$1" ] ||
        return 1
}

ismagic () {
    local manage="^(#!){1}.*(manage){1}.*"
    local bash="^(#!){1}.*(bash){1}.*"

    {
        read -r line
    } < "$1"

    [[ "${line}" =~ ${manage} ]] ||
    [[ "${line}" =~ ${bash}   ]]
}

#shellcheck disable=SC1001
isscript () {
    local file="$1"

    isfile "${file}" &&
    ismagic "${file}" &&
    [[ "$(basename "${file}")" =~ ^[-a-zA-Z\_]*$ ]]
}

isinternal ()
{
    _ required "$1" ||
        return 1

    local internal
    # shellcheck disable=SC2034
    internal=("help" "_manage_help" "completion" "_manage_completion")
    _ includes internal "$1"
}

checkdependencies () {
    local dependencies=($@)
    local PATH="${MANAGEDIRECTORY}/vendor/bats/libexec:$PATH"

    if ! _ exists "${dependencies[@]}"
    then
        echo "Dependency \"${dependencies[$(($?-1))]}\" not satisfied."
        exit 1
    fi
}

checkscriptdependencies ()
{
    _ required "$1" || return 1
    local path="$1"
    local dependencies
    dependencies=($(_ tag "dependency" "${path}"))
    checkdependencies "${dependencies[@]}"
}

