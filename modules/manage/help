#!/usr/bin/env bash
# @import manage/scriptPresent
# @import manage/scriptFilter
# @import console/attribute
# @import string/wrap
# @import lang/required
# @import lang/repeat
# @dependency sed
# @dependency tr

help () (
    getSpace () {
        local len="$1"
        local char="${2:-" "}"
        repeat "${len}" echo -n "${char}"
    }

    getLength () {
        echo "$1" |
        wc -L
    }

    local longNameLength
    local paragraph
    local separator
    local leftMargin
    local script="$1"
    local maximumWidth="75"
    local separatorLength="3"
    local leftMarginLength="2"

    longNameLength="$(getLength "$(scriptFilter basename)")"

    local paragraphLength="$((leftMarginLength +
    longNameLength +
    separatorLength))"

    local textWidth="$((maximumWidth - paragraphLength))"

    leftMargin="$(getSpace "${leftMarginLength}")"
    paragraph="$(getSpace "${paragraphLength}")"
    separator="$(getSpace "${separatorLength}")"

    useageString () {
        echo -e "\n${leftMargin}$(attribute bold)Usage:$(attribute)" "$(basename "$0") $1 [ arguments ... ]\n"
    }

    title ()
    {
        local lspace
        local length
        local adjustment

        length="$(getLength "$1")"
        adjustment="$((length+separatorLength))"
        lspace="${paragraph:${adjustment}}"

        echo -n "$(attribute bold)${lspace}$1${separator}$(attribute)"
    }

    table () {
        title "$1"
        local desc

        desc="$(
            wrap "${2}" "${textWidth}" |
            tr -s '\n' |
            sed   "2,\${s/^/${paragraph}/}"
        )"

        echo "${desc}"
    }

    description () {
        table "$(basename "$1")" \
              "$(MANAGE_TAG description "$1")"
    }

    if scriptPresent "${script}"
    then
        script="${script}"
    elif includes MANAGE_PUBLIC "${script}"
    then
        script="_manage_${script}"
    else
        script=""
    fi

    if [ -n "${script}" ]
    then
        useageString "$1"
        description "$(scriptPath "${script}")"
        echo
    else
        useageString '[ script ]'
        scriptFilter description
        echo

        if [ -n "$1" ]
        then
            echo -e "${leftMargin}Script \"$1\" does not exist.\n"
            return 1
        fi
    fi
)
