#!/usr/bin/env bash
# @dependency tput
# @dependency seq

progress() {
  [[ -z $SHML_PROGRESS_WIDTH ]]    && SHML_PROGRESS_WIDTH=60
  [[ -z $SHML_PROGRESS_BREAK ]]    && SHML_PROGRESS_BREAK=true
  [[ -z $SHML_PROGRESS_CLEAR ]]    && SHML_PROGRESS_CLEAR=false
  [[ -z $SHML_PROGRESS_NOCURSOR ]] && SHML_PROGRESS_NOCURSOR=true
  # defaults
  local __title="Progress"
  local __steps=10
  local __char="#"

  # arg parser
  [[ ! -z $1 ]] && __title=$1
  [[ ! -z $2 ]] && __steps=$2
  [[ ! -z $3 ]] && __char="$3"

  local __width=${SHML_PROGRESS_WIDTH}
  local __break=${SHML_PROGRESS_BREAK}
  local __clear=${SHML_PROGRESS_CLEAR}
  local __ncursor=${SHML_PROGRESS_NOCURSOR}
  local __pct=0
  local __num=0
  local __len=0
  local __bar=''
  local __line=''

  # ensure terminal
  [[ -t 1 ]] || return 1

  # ensure tput
  if test "$(which tput)"; then
    if $__ncursor; then
      # hide cursor
      tput civis
      trap 'tput cnorm; exit 1' SIGINT
    fi
  fi

  while read __value; do
    # compute pct
    __pct=$(( __value * 100 / __steps ))

    # compute number of blocks to display
    __num=$(( __value * __width / __steps ))

    # create bar string
    if [ $__num -gt 0 ]; then
      __bar=$(printf "%0.s${__char}" $(seq 1 $__num))
    fi

    __line=$(printf "%s [%-${__witdth}s] (%d%%)" "$__title" "$__bar" "$__pct")

    # print bar
    echo -en "${__line}\r"
  done

  # clear line if requested
  if $__clear; then
    __len=$(echo -en "$__line" | wc -c)
    printf "%$((__len + 1))s\r" " "
  fi

  # new line if requested
  $__break && echo

  # show cursor again
  test "$(which tput)" && $__ncursor && tput cnorm
}
