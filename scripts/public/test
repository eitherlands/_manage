#!/usr/bin/env bash
#
# vim: set ft=sh:
#
# @description Run the test suite
# @import lang/required
# @import array/join
# @import lang/exists
# @import console/die
# @import console/hr
# @import console/attribute
# @import console/fgcolor
# @import manage/isMagic
# @import string/squeeze

CLEANUP_DIRECTORIES=()
FAILED_TESTS=()
FIXED_NUMBER=0
SUCCESS_NUMBER=0
FAILED_NUMBER=0
BROKEN_NUMBER=0
TOTAL_NUMBER=0
EXIT_CODE=0

testName () {
    local name
    name="$(basename "${1}")"
    name=${name%%.*}
    echo "${name}"
}

isCi () {

    # Returns 0 if the current environment
    # is a Continuous Integration server.

    local ci=(
        "${CI}"                     # Travis CI, CircleCI, ...
        "${CONTINUOUS_INTEGRATION}" # Travis CI, ...
        "${BUILD_NUMBER}"           # Jenkins, TeamCity, ...
        "${JENKINS_URL}"            # Jenkins
        "${bamboo_planKey}"         # Bamboo (by Atlassian)
        "${TF_BUILD}"               # Team Foundation Server
        "${TEAMCITY_VERSION}"       # TeamCity (by JetBrains)
        "${BUILDKITE}"              # Buildkite
        "${HUDSON_URL}"             # Hudson
        "${MANAGE_BUILD}"           # Manage
        "${container}"              # Container
    )

    local code=0
    local variable

    for variable in "${ci[@]}"
    do
        _ required "${variable}" || ((++code))
    done

    [[ ! "${#ci[@]}" == "${code}" ]]
}

aggregate_results () {
    local file="$1"
    local name="$2"
    while IFS=' ' read type value
    do
        case $type in
            '')
                continue
            ;;
            fixed)
                FIXED_NUMBER=$((FIXED_NUMBER + value))
            ;;
            success)
                SUCCESS_NUMBER=$((SUCCESS_NUMBER + value))
            ;;
            failed)
                FAILED_NUMBER=$((FAILED_NUMBER + value))
                if test "${value}" != 0; then
                    FAILED_TESTS+=("${name}")
                fi
            ;;
            broken)
                BROKEN_NUMBER=$((BROKEN_NUMBER + value))
            ;;
            total)
                TOTAL_NUMBER=$((TOTAL_NUMBER + value))
            ;;
        esac
    done < "${file}"
}

test_runtime () {
    local file="$1"
    local sharness
    local testSource
    local exports
    local commandString
    local flags=()
    local tmpDir
    local result
    local resultFile
    local name

    name="$(testName "${file}")"

    tmpDir="$(mktemp -d)"
    CLEANUP_DIRECTORIES+=("${tmpDir}")
    resultFile="${tmpDir}/${name}.counts"

    isCi && flags+=("--no-color")

    sharness="source \"${MANAGE_DIRECTORY}/vendor/sharness/sharness.sh\" ${flags[@]}"
    testSource="source \"${file}\""

    if [ ! -z "${MANAGE_TEST_DIRECTORY}" ]
    then
        exports+="MANAGE_TEST_DIRECTORY=\"${MANAGE_TEST_DIRECTORY}\" "
        exports+="SHARNESS_TEST_DIRECTORY=\"${MANAGE_TEST_DIRECTORY}\" "
        exports+="SHARNESS_RESULT=\"${resultFile}\" "
        exports+="SHARNESS_TRASH_DIRECTORY=\"${tmpDir}/trash\" "
    fi

    exports+="MANAGE_DIRECTORY=\"${MANAGE_DIRECTORY}\"
    MANAGE_REPOSITORY=\"${MANAGE_REPOSITORY}\""

    commandString="$(echo "${exports} && ${sharness} && ${testSource}" | tr '\n' ' ')"
    commandString="$(_ squeeze "${commandString}")"

    "bash"                  \
    "--norc"                \
    "--noprofile"           \
    "-c" "${commandString}" || EXIT_CODE=$?

    aggregate_results "${resultFile}" "${name}"
}

test_suite () {
    local name
    local file
    local targets=()

    if [ -d "${MANAGE_TEST_DIRECTORY}" ]
    then
        if _ required "${1}"
        then
            for file in "${MANAGE_TEST_DIRECTORY}"/*.spec.sh
            do
                if [   -f "${file}" ] &&
                   [   -r "${file}" ] &&
                   _ isMagic "${file}"
                then
                    name="$(testName "${file}")"

                    if [[ "${1}" == "${name}" ]]
                    then
                        targets=("${file}")
                    fi
                fi
            done
            cd "${OPWD}" || exit
        else
            for file in "${MANAGE_TEST_DIRECTORY}"/*.{spec.sh,t,t.sh}
            do
                if [   -f "${file}" ] &&
                   [   -r "${file}" ] &&
                   _ isMagic "${file}"
                then
                    targets+=("${file}")
                fi
            done
        fi

        if [ ! "${#targets[@]}" -eq 0 ]
        then
            for target in "${targets[@]}"
            do
                echo
                echo "#" "$(_ attribute bold "$(testName "${target}")") $(_ attribute end)"
                echo
                test_runtime "${target}"
            done

            printf "\n# %s tests, %s passed, %s fixed, %s broken, %s failed\n" \
                "$(_ attribute bold "${TOTAL_NUMBER}")$(_ attribute end)"    \
                "$(_ attribute bold "${SUCCESS_NUMBER}")$(_ attribute end)"  \
                "$(_ attribute bold "${FIXED_NUMBER}")$(_ attribute end)"    \
                "$(_ attribute bold "${BROKEN_NUMBER}")$(_ attribute end)"   \
                "$(_ attribute bold "${FAILED_NUMBER}")$(_ attribute end)"
        fi
    else
        _ die "The directory ${MANAGE_TEST_DIRECTORY} does not exist."
    fi
}

main () {
    strict true
    verbose true

    test_suite "$@"
}

onExit ()
{
    for directory in "${CLEANUP_DIRECTORIES[@]}"
    do
        [ -d "${directory}" ] && rm -rf "${directory}"
    done

    exit "${EXIT_CODE}"
}

# TODO: completion

# completion () {
#     if (( $# == 0 ))
#     then
#         if [ -d "${MANAGE_TEST_DIRECTORY}" ]
#         then
#             for file in "${MANAGE_TEST_DIRECTORY}"/*.bats
#             do
#                 if [   -f "${file}" ] &&
#                    [   -r "${file}" ] &&
#                    [[ "$(basename "${file}")" == *.bats ]]
#                 then
#                     name="$(basename "${file}")"
#                     echo "${name::-5}"
#                 fi
#             done
#         fi
#     fi
# }
