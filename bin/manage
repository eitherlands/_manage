#!/usr/bin/env bash
#
# Copyright (c) 2017 Mark Milstein <mark@epiloque.com>
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.
#
# @doc manage is a convention for setting up shell programs that use subcommands.
#
# For more details on how to define your own commands
# look online at https://github.com/epiloque/manage
#
# shellcheck disable=SC1090,SC2016,SC2034
# @dependency bc
# @dependency cut
# @dependency find
# @dependency fold
# @dependency grep
# @dependency head
# @dependency printf
# @dependency rev
# @dependency sed
# @dependency seq
# @dependency sort
# @dependency tr

if ((BASH_VERSINFO[0] >= 4)) &&
   ((BASH_VERSINFO[1] >= 2))
then
    true
else
    echo "You need at least GNU bash, version 4.2" >&2
    exit 1
fi

MANAGE_IS_CI () {
    # Returns 0 if the current environment
    # is a Continuous Integration server.

    local ci=(
        "${CI}"                     # Travis CI, CircleCI, Gitlab CI, Appveyor, CodeShip
        "${CONTINUOUS_INTEGRATION}" # Travis CI
        "${BUILD_NUMBER}"           # Jenkins, TeamCity
    )

    local code=0
    local variable

    for variable in "${ci[@]}"
    do
        [ ! -z "${variable// }" ] || code=$((code+1))
    done

    [[ ! "${#ci[@]}" == "${code}" ]]
}

if [ -z "${MANAGE_INTERACTIVE}" ] &&
   [ -t 0 ] &&
   [ -t 1 ] &&
   ! MANAGE_IS_CI
then
    MANAGE_INTERACTIVE=true
else
    MANAGE_INTERACTIVE=false
fi

MANAGE_COREUTILS=(sed sort)

for executable in "${MANAGE_COREUTILS[@]}"
do
    eval "
        ${executable} ()
        {
            if command -v \"g${executable}\" > /dev/null 2>&1
            then
                command \"g${executable}\" \"\$@\"
            else
                command \"${executable}\" \"\$@\"
            fi
        }
    "
done

unset executable

strict()
{
    # set/unset strict mode
    #
    # Usage: strict true/false
    #

    local value
    value="$(tr '[:upper:]' '[:lower:]' <<< "$1")"
    case "${value}" in
        no|n|false|f|off|0)
            set   +o errexit
            set   +o errtrace
            set   +o pipefail
            shopt -u nullglob
            IFS=$' \n\t'
            ;;
        *)
            set   -o errexit
            set   -o errtrace
            set   -o pipefail
            shopt -s nullglob
            IFS=$'\n\t'
    esac
}

verbose ()
{
    #
    # With no arguments, test if verbose mode is enabled.
    # With one argument, set/unset verbose mode.
    #

    if (( $# == 0 )); then
        [ -n "${MANAGE_VERBOSE}" ] && return "${MANAGE_VERBOSE}"
        return 1
    else
        local value
        value="$(tr '[:upper:]' '[:lower:]' <<< "$1")"
        case "${value}" in
            no|n|false|f|off|0)
                MANAGE_VERBOSE=1
                ;;
            *)
                MANAGE_VERBOSE=0
        esac
    fi
}

declare -A MANAGE_MODULE_NAMES
declare -A MANAGE_MODULES
declare -A MANAGE_REMOTES
declare -A MANAGE_REMOTE_PATHS

MANAGE_ERROR () {
    local type="$1"; shift
    local prefix=$'\033[1m\033[31mERROR\033[39m\033[0m'

    MANAGE_SPINNER disable

    case "${type}" in
        notDefined)
            printf "%s '%s' is not defined\n" "${prefix}" "$@" >&2
        ;;
        notRepository)
            printf "%s '%s' is not a valid manage repository\n" "${prefix}" "$@" >&2
        ;;
        diffVersion)
            printf "%s at least two different versions requested for the '%s' repository\n" "${prefix}" "$@" >&2
        ;;
        failDownload)
            printf "%s failed to download repository '%s'\n" "${prefix}" "$@" >&2
        ;;
        invalidQuery)
            printf "%s invalid option '%s' in query '%s'\n" "${prefix}" "$@" >&2
        ;;
        invalidVersion)
            printf "%s version option in query '%s'\nmust match the pattern '%s'\n" "${prefix}" "$@" >&2
        ;;
        failImport)
            printf "%s failed to import '%s'\n" "${prefix}" "$@" >&2
        ;;
        failVerify)
            printf "%s failed to verify repository '%s' with tag '%s'\n" "${prefix}" "$@" >&2
        ;;
        collision)
            printf "%s the same name is used by two different functions\n '%s' and '%s'\n" "${prefix}" "$@" >&2
        ;;
        *)
            printf "%s uncaught exception\n" "${prefix}" >&2
    esac

    exit 1
}

MANAGE_BOOTSTRAP () {
    local namespace

    eval "$(
        echo 'MANAGE_RUNTIME () (
        strict true
        '

        echo "${MANAGE_NAMESPACE}"

        echo '
            local ___func="$1"
            shift

            if [[ "$(type -t "${___func}")" = "function" ]]
            then
                "${___func}" "$@"
            else
                return 1
            fi
        )
        '
    )"
}

_ () {
    if [[ -n "${1}" ]] &&
       [[ -n "${MANAGE_MODULE_NAMES["${1}"]}" ]]
    then
        MANAGE_RUNTIME "$@"
    else
        MANAGE_ERROR notDefined "$1"
    fi
}

MANAGE_GET_FUNCTION () (
    cd "$(dirname "${1}")" || return 1

    source "${1}"
    declare -f "${2}"
)

MANAGE_SPINNER_ENABLED=false
MANAGE_SPINNER_STATE=0
MANAGE_SPINNER_SYMBOLS=("⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏")

MANAGE_SPINNER () {
    local mode="$1"
    local line
    local symbol

    case "${mode}" in
        enable)
            if [[ "${MANAGE_INTERACTIVE}" = "true" ]] &&
               [[ "${MANAGE_SPINNER_ENABLED}" = "false" ]]
            then
                if test "$(which tput)"
                then
                    tput civis
                    trap 'tput cnorm; exit 1' INT HUP TERM QUIT EXIT
                fi

                MANAGE_SPINNER_ENABLED=true
            fi
        ;;
        disable)
            if [[ "${MANAGE_SPINNER_ENABLED}" = "true" ]]
            then
                printf "\e[K\r"
                test "$(which tput)" && tput cnorm

                MANAGE_SPINNER_ENABLED=false
            fi
        ;;
        *)
            if [[ "${MANAGE_SPINNER_ENABLED}" = "true" ]]
            then
                if [[ "${#MANAGE_SPINNER_SYMBOLS[@]}" = "${MANAGE_SPINNER_STATE}" ]]
                then
                    MANAGE_SPINNER_STATE=0
                else
                    symbol="${MANAGE_SPINNER_SYMBOLS[${MANAGE_SPINNER_STATE}]}"
                    MANAGE_SPINNER_STATE=$((MANAGE_SPINNER_STATE + 1))

                    printf "%s \e[K%s\r" "${symbol}" "${mode}"
                fi
            fi
    esac
}

MANAGE_SOURCE () {
    local mode="$1"
    local file="$2"
    local script="$3"
    local longName="${4:-${script}}"
    local name
    local cwd

    name="$(basename "${script}")"

    if [[ -z "${MANAGE_MODULE_NAMES["${name}"]}" ]]
    then
        MANAGE_MODULE_NAMES["${name}"]="${longName}"
    else
        MANAGE_ERROR collision "${longName}" "${MANAGE_MODULE_NAMES["${name}"]}"
    fi

    if [[ "${mode}" = "underscore" ]]
    then
        MANAGE_NAMESPACE+="$(MANAGE_GET_FUNCTION "${file}" "${name}")"$'\n' ||
            MANAGE_ERROR failImport "${longName}"
    elif [[ "${mode}" = "local" ]]
    then
        {
            cwd="$(pwd)"
            cd "$(dirname "${file}")"
            source "${file}"
            cd "${cwd}"
        } || MANAGE_ERROR failImport "${longName}"
    fi
}

MANAGE_GET () {
    local repository="$1"
    local version="$2"
    local directory="$3"
    local verify="$4"
    local modulePath

    local localVersion

    local lsRemoteRegex="^[a-z0-9]{40}[\t ]+refs\/tags\/v([0-9]+)\.([0-9]+)\.([0-9]+)([0-9A-Za-z-])?"
    local state=1

    if [[ -n "${MANAGE_REMOTES["${repository}"]}" ]]
    then
        [[ "${MANAGE_REMOTES["${repository}"]}" != "${version}" ]] && {
            MANAGE_ERROR diffVersion "${repository}"
        }

        state=0
    else
        if [ -d "${directory}" ] &&
           [ -f "${directory}/.manage.yml" ] &&
           cd "${directory}" &&
           [[ "$(git remote get-url origin)" = "${repository}" ]] &&
           localVersion="$(git describe --exact-match HEAD | head -n 1)"
        then
            if [[ "${verify}" = "false" ]]
            then
                state=0
                MANAGE_REMOTES["${repository}"]="${version}"
            else
                cd "${directory}" &&
                git tag -v "${localVersion}" &> /dev/null &&
                state=0 &&
                MANAGE_REMOTES["${repository}"]="${version}"
            fi

            if [[ "${version}" == "latest" ]] ||
               [[ "${version}" == "${localVersion}" ]]
            then
                true
            else
                state=1
            fi
        fi
    fi

    if [[ "${state}" = 1 ]]
    then
        (
            rm -rf "${directory}"
            mkdir -p "${directory}"
            cd "${directory}"

            git init -q "${directory}"
            GIT_TERMINAL_PROMPT=0 git remote add origin "${repository}"

            if [[ "${version}" = "latest" ]]
            then
                version="$(
                    git ls-remote --refs -t -h -q |
                    sed -r -n "/${lsRemoteRegex}/p" |
                    LC_ALL=C sort -r -t '/' -k 3 -V |
                    head -n 1 |
                    cut -d '/' -f 3
                )"
            fi

            {
                git fetch -q --depth=1 --recurse-submodules=yes origin tag "${version}"
                git checkout -q "${version}"
                git submodule --quiet update --depth 1 --init --recursive
            } &> /dev/null

            if [[ "${verify}" = "true" ]]
            then
                git tag -v "${version}" &> /dev/null || {
                    rm -rf "${directory}"
                    MANAGE_ERROR failVerify "${repository}" "${version}"
                }
            fi
        ) || return 1

        MANAGE_REMOTES["${repository}"]="${2}"
    fi

    if [[ ! -n "${MANAGE_REMOTE_PATHS["${repository}"]}" ]]
    then
        [ ! -f "${directory}/.manage.yml" ] && {
            rm -rf "${directory}" || true
            MANAGE_ERROR notRepository "${repository}"
        }

        modulePath="$(
            awk '
                !/^[[:blank:]]/ {unindented = $0}
                /module: / && /^[[:blank:]]/ {
                    if (unindented == "directories:") {
                            gsub(/^[ \t\r\n]+module:[ \t\r\n]+/, "", $0);
                            print;
                    }
                }
            ' "${directory}/.manage.yml"
        )" || modulePath=

        if [ ! -n "${modulePath}" ]
        then
            modulePath="scripts/modules"
        fi

        modulePath="${directory}/${modulePath}"

        [ ! -d "${modulePath}" ] && {
            rm -rf "${directory}" || true
            MANAGE_ERROR notRepository "${repository}"
        }

        MANAGE_REMOTE_PATHS["${repository}"]="${modulePath}"
    fi
}

MANAGE_TAG ()
{
    local tag=${1}; shift
    local trim='s/^[ \t]*//;s/[ \t]*$//'
    local comment='^[ \t]*[#]+[ \t]*'
    local import='[-_a-zA-Z0-9]+\/[-_a-zA-Z0-9]+|github.com\/[-a-z0-9]{0,39}\/[-_a-zA-Z0-9]+\/[-_a-zA-Z0-9]+\/[-_a-zA-Z0-9]+(\?[a-zA-Z0-9]+=[a-zA-Z0-9\.]+)*'
    local dependency='[-_a-zA-Z0-9]+'

    case "$tag" in
        import)
            sed -nr "s/${comment}@${tag} (${import})$/\1/p;${trim}" "$@"
        ;;
        dependency)
            sed -nr "s/${comment}*@${tag} (${dependency})$/\1/p;${trim}" "$@"
        ;;
        *)
            sed -nr "s/${comment}*@${tag} (.+)$/\1/p;${trim}" "$@"
    esac
}

MANAGE_QUERY () {
    local mode="$1"; shift 1
    local file
    local list

    for file in "$@"
    do
        list="$(MANAGE_TAG import "${file}")"
        list="${list//$'\n'/ }"
        list=(${list})

        if [[ "${file}" == "${MANAGE_DOWNLOAD_DIRECTORY}"/* ]]
        then
            MANAGE_RESOLVE_REMOTE "${mode}" "${list[@]}"
        else
            MANAGE_RESOLVE_LOCAL "${mode}" "${list[@]}"
        fi
    done
}

MANAGE_RESOLVE_REMOTE () {
    local mode="$1"; shift 1
    local arguments
    local script
    local file
    local versionRegex='v([0-9]+)\.([0-9]+)\.([0-9]+)([\.0-9A-Za-z-]*)?'

    IFS=$'\n ' read -r -a arguments <<< "${@}"

    declare -A managePaths
    declare -A imports
    declare -A scripts
    declare -A remoteModules
    declare -A manageModules

    managePaths["${MANAGE_DIRECTORY}/modules"]="1"

    for script in "${arguments[@]}"
    do
        if [[ -n "${script}" ]] &&
           [[ -z "${scripts["${script}"]}" ]]
        then
            if [[ "${script:0:10}" != "github.com" ]]
            then
                [[ -z "${MANAGE_MODULES["${script}"]}" ]] && {
                    scripts["${script}"]="${script}"
                    MANAGE_SPINNER "${script}"
                }
            else
                IFS='/?' read -r -a query <<< "$script"

                local directory="${MANAGE_DOWNLOAD_DIRECTORY}/${query[1]}/${query[2]}"
                local repository="https://${query[0]}/${query[1]}/${query[2]}.git"
                local scriptName="${query[3]}/${query[4]}"
                script="${query[0]}/${query[1]}/${query[2]}/${query[3]}/${query[4]}"

                if [[ -z "${MANAGE_MODULES["${script}"]}" ]]
                then
                    local query=("${query[@]:5}")
                    local part key value
                    local version="latest"
                    local verify="true"

                    for part in "${query[@]}"
                    do
                        key="${part%=*}"
                        value="${part#*=}"

                        case "${key}" in
                            version)
                                if [[ "${value}" =~ ^${versionRegex}$ || "${value}" = "latest" ]]
                                then
                                    version="${value}"
                                else
                                    MANAGE_ERROR invalidVersion "${script}?${part}" "${versionRegex}"
                                fi
                            ;;
                            verify)
                                case "${value}" in
                                    no|n|false|f|off|0)
                                        verify=false
                                        ;;
                                    *)
                                        verify=true
                                esac
                            ;;
                            *)
                                MANAGE_ERROR invalidQuery "${part}" "${script}?${part}"
                        esac
                    done

                    MANAGE_SPINNER "${script}"

                    MANAGE_GET "${repository}" "${version}" "${directory}" "${verify}" || {
                        rm -rf "${directory}" || true
                        MANAGE_ERROR failDownload "${repository}"
                    }

                    scripts["${scriptName}"]="${script}"
                fi
            fi
        fi
    done

    while read -d '' -r file
    do
        for script in "${!scripts[@]}"
        do
            if [[ "${file}" =~ ${script}$ ]] &&
               [[ "$(head -n 1 "${file}")" =~ ^(#!){1}.*(bash){1}.* ]] &&
               [[ "$(basename "${file}")" =~ ^[-_a-zA-Z0-9]*$ ]]
            then
                if [[ "${file}" == "${MANAGE_DOWNLOAD_DIRECTORY}/"* ]]
                then
                    remoteModules["${script}"]="${file}"
                else
                    manageModules["${script}"]="${file}"
                fi
            fi
        done
    done < <(find "${!managePaths[@]}" "${MANAGE_REMOTE_PATHS[@]}" -type f -print0 2> /dev/null)

    for script in "${!manageModules[@]}"
    do
        local longName="${scripts["${script}"]}"

        if [[ "${longName:0:10}" = "github.com" ]]
        then
            MANAGE_ERROR failImport "${longName}"
        fi

        file="${manageModules["${script}"]}"
        imports["${file}"]=1

        MANAGE_SOURCE "${mode}" "${file}" "${script}" "${longName}"
        MANAGE_MODULES["${script}"]="${file}"
    done

    for script in "${!remoteModules[@]}"
    do
        file="${remoteModules["${script}"]}"
        imports["${file}"]=1

        MANAGE_SOURCE "${mode}" "${file}" "${script}" "${scripts["${script}"]}"
        MANAGE_MODULES["${script}"]="${file}"
    done

    for script in "${!scripts[@]}"
    do
        [ -z "${MANAGE_MODULES["${script}"]}" ] && {
            MANAGE_ERROR failImport "${script}"
        }
    done

    if [ ! ${#imports[@]} -eq 0 ]
    then
        MANAGE_QUERY "${mode}" "${!imports[@]}"
    fi
}

MANAGE_RESOLVE_LOCAL () {
    local mode="$1"; shift 1
    local arguments
    local script
    local file

    IFS=$'\n ' read -r -a arguments <<< "${@}"

    declare -A localModules
    declare -A manageModules
    declare -A managePaths
    declare -A imports
    declare -A scripts

    managePaths["${MANAGE_DIRECTORY}/modules"]="1"
    [ -n "${MANAGE_MODULE_DIRECTORY}" ] && managePaths["${MANAGE_MODULE_DIRECTORY}"]="1"

    for script in "${arguments[@]}"
    do
        [[ -n "${script}" ]] &&
        [[ -z "${MANAGE_MODULES["${script}"]}" ]] && {
            scripts["${script}"]=1
            MANAGE_SPINNER "${script}"
        }
    done

    while read -d '' -r file
    do
        for script in "${!scripts[@]}"
        do
            if [[ "${file}" =~ ${script}$ ]] &&
               [[ "$(head -n 1 "${file}")" =~ ^(#!){1}.*(bash){1}.* ]] &&
               [[ "$(basename "${file}")" =~ ^[-_a-zA-Z0-9]*$ ]]
            then
                if [[ "${file}" == "${MANAGE_DIRECTORY}/modules/"* ]]
                then
                    manageModules["${script}"]="${file}"
                elif [[ -n "${MANAGE_MODULE_DIRECTORY}" ]] &&
                     [[ "${MANAGE_MODULE_DIRECTORY}" != "${MANAGE_DIRECTORY}" ]] &&
                     [[ "${file}" == "${MANAGE_MODULE_DIRECTORY}/"* ]]
                then
                    localModules["${script}"]="${file}"
                fi
            fi
        done
    done < <(find "${!managePaths[@]}" -type f -print0 2> /dev/null)

    for script in "${!manageModules[@]}"
    do
        file="${manageModules["${script}"]}"
        imports["${file}"]=1

        MANAGE_SOURCE "${mode}" "${file}" "${script}"
        MANAGE_MODULES["${script}"]="${file}"
    done

    for script in "${!localModules[@]}"
    do
        file="${localModules["${script}"]}"
        imports["${file}"]=1

        MANAGE_SOURCE "${mode}" "${file}" "${script}"
        MANAGE_MODULES["${script}"]="${file}"
    done

    # for script in "${!scripts[@]}"
    # do
    #     [ -z "${MANAGE_MODULES["${script}"]}" ] && {
    #         MANAGE_ERROR failImport "${script}"
    #     }
    # done

    if [ ! ${#imports[@]} -eq 0 ]
    then
        MANAGE_QUERY "${mode}" "${!imports[@]}"
    fi
}

MANAGE_RESOLVE () {
    local mode="$1"; shift 1
    local arguments
    local script

    if [ -z "${MANAGE_REPOSITORY}" ] &&
       [ -z "${MANAGE_DOWNLOAD_DIRECTORY}" ]
    then
        MANAGE_DOWNLOAD_DIRECTORY="${MANAGE_DIRECTORY}/.manage_modules"
    else
        MANAGE_DOWNLOAD_DIRECTORY="${MANAGE_REPOSITORY}/.manage_modules"
    fi

    IFS=$'\n ' read -r -a arguments <<< "${@}"

    declare -A localModules
    declare -A remoteModules

    for script in "${arguments[@]}"
    do
        [[ -n "${script}" ]] && case "${script}" in
            github.com*)
                remoteModules["${script}"]=1
            ;;
            *)
                localModules["${script}"]=1
        esac
    done

    MANAGE_RESOLVE_LOCAL "${mode}" "${!localModules[@]}"
    MANAGE_RESOLVE_REMOTE "${mode}" "${!remoteModules[@]}"
}

MANAGE_LOCAL () {
    MANAGE_RESOLVE local "$@"
}

MANAGE_UNDERSCORE () {
    MANAGE_RESOLVE underscore "$@"
}

MANAGE_ONCE () {
    local __code=0
    "$@" || __code="$?"
    eval "$1"' () { return '"${__code}"'; }'
    return "${__code}"
}

MANAGE_MAIN ()
{
    local _code

    if declare -f "main" > /dev/null 2>&1
    then
        trap 'MANAGE_ONCE MANAGE_RETURN $?' INT HUP TERM QUIT EXIT
        main "$@"
        _code=$?
        trap - INT HUP TERM QUIT EXIT ERR
    fi

    MANAGE_ONCE MANAGE_RETURN "${_code}"

    return $?
}

MANAGE_RETURN ()
{
    local _code=${1:-0}
    if declare -f "onExit" > /dev/null 2>&1
    then
        onExit "${_code}" || true
    fi

    return "${_code}"
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]
then
    MANAGE_IMPORT_ARRAY=(${MANAGE_IMPORT})

    strict true

    if [ ! ${#MANAGE_IMPORT_ARRAY[@]} -eq 0 ]
    then
        MANAGE_SPINNER enable

        MANAGE_UNDERSCORE "${MANAGE_IMPORT_ARRAY[@]}"
        MANAGE_BOOTSTRAP

        MANAGE_SPINNER disable
    fi

    [ -n "${MANAGE_SCRIPT_PATH}" ] &&
    source "${MANAGE_SCRIPT_PATH}"
    MANAGE_MAIN "$@"
else
    strict true

    resolvelink() {
        $(type -p greadlink readlink | head -1) "$1"
    }

    absolutedirectorypath() {
        local cwd
        local path="$1"

        cwd="$(pwd)"

        while [ -n "$path" ]; do
            cd "${path%/*}" || exit
            local name="${path##*/}"
            path="$(resolvelink "$name" || true)"
        done

        pwd
        cd "${cwd}" || exit
    }

    expandpath() {
        { cd "$(dirname "$1")" 2>/dev/null
            local dirname="$PWD"
            cd "$OLDPWD"
            echo "$dirname/$(basename "$1")"
        } || echo "$1"
    }

    # shellcheck disable=SC2034

    MANAGE_CWD="$(absolutedirectorypath .)"
    MANAGE_ZERO="$(expandpath "$0")"
    MANAGE_LIBEXEC="$(absolutedirectorypath "${MANAGE_ZERO}")"
    MANAGE_DIRECTORY="$(absolutedirectorypath "${MANAGE_LIBEXEC}")"

    LC_ALL=C

    declare -A MANAGE_SCRIPTS

    MANAGE_SPINNER enable

    MANAGE_LOCAL \
        manage/checkFileDependencies \
        manage/collectScripts \
        manage/help

    MANAGE_SPINNER disable

    checkFileDependencies "${MANAGE_DIRECTORY}/bin/manage"
    collectScripts "$@"
fi
