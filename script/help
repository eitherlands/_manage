#!/usr/bin/env bash
#
# <doc>
#
# Display this help and exit
#
# </doc>
#
# <import>
#
# collection-message
# collection-shell
# collection-string
#
# </import>
#
# <dependencies>
#
# wc
#
# </dependencies>

title ()
{
    local lspace
    local length
    local adjustment

    length="$(getlength "$1")"
    adjustment="$((length+separatorlength))"
    lspace="${paragraph:${adjustment}}"

    echo -n "$(_ a bold)${lspace}$1${separator}$(_ a)"
}

table () {
    title "$1"
    echo  "$2"           |
    _ wrap "${textwidth}" |
    tr -s '\n'           |
    sed   "2,\${s/^/${paragraph}/}"

}

description () {
    local script
    script="${SCRIPTNAMES[$1]}"
    if [ "${script:0:1}" == "_" ]
    then
        if _ includes MANAGEPUBLIC "${script:8}"
        then
            table "${script:8}" \
                "$(getdoc "${script}")"
        fi
    else
        table "${script}" \
            "$(getdoc "${script}")"
    fi
}

usagestring()
{
    echo -e "\n${leftmargin}$(_a bold)Usage:$(_a)" "$(basename "$0") $1 [ arguments ... ]\n"
}

usage ()
{
    usagestring '[ script ]'
    forscript description
    echo
}

help ()
{
    if exists "$1"
    then
        usagestring "$1"
        description "$1"
        echo
    else
        __ cache usage
        echo -e "${leftmargin}Script \"$1\" does not exist.\n"
        return 1
    fi
}

getspace () {
    local len="$1"
    local char="${2:-" "}"
    _ repeat "${len}" echo -n "${char}"
}

filter () {
    local script
    script="${SCRIPTNAMES[$1]}"
    if [ ! "${script:0:1}" == "_" ]
    then
        "$2" "${script}"
    fi
}

forscript () {
    _ forEach SCRIPTNAMES \
        "$1" "$2"
}

getnames () {
    _ join MANAGEPUBLIC
    forscript filter echo
}

getlength () {
    echo "$1" |
    wc -L
}

main ()
{
    strict true

    maximumwidth="75"
    separatorlength="3"
    leftmarginlength="2"
    longnamelength="$(getlength "$(getnames)")"
    paragraphlength="$((leftmarginlength +
        longnamelength +
        separatorlength))"

    textwidth="$((maximumwidth - paragraphlength))"

    leftmargin="$(getspace "${leftmarginlength}")"
    paragraph="$(getspace "${paragraphlength}")"
    separator="$(getspace "${separatorlength}")"

    if _ required "$1"
    then
        help "$1"
    else
        __ cache usage
    fi
}

