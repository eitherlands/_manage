#!/usr/bin/env bash
#
# vim: set ft=sh:
#
# <doc>
#
# Build every version in
# the repository manifest
#
# </doc>
#
# <import>
#
# collection-shell
# collection-message
# collection-string
# collection-yaml
#
# </import>
#
# <dependency>
#
# git
# awk
#
# </dependency>

parse () {
    local url
    local tag
    local reference
    local version
    local manifest
    local line

    local _reference
    local _line

    local OIFS="${IFS}"
    local IFS=$'\n'
    manifest=($1)
    IFS="${OIFS}"
    shift

    for line in "${manifest[@]}"
    do
        tag="$(echo "$line" | awk -F ': +' '{ print $1 }')"

        _line="$(echo "$line" | awk -F ': +' '{ print $2 }')"
        url="${_line%%@*}"
        # url="${url#*://}"
        # url="${url%/}"
        # url="${url%.git}"
        # url="${url%/}"

        _reference="${_line#*@}"

        reference="${_reference%% *}"
        version="${_reference#* }"

        if [ "$version" = "$_reference" ]
        then
            version=
        fi

        "$@" "${url}" "${tag}" "${reference}" "${version}"
    done
}

filter () {
    _ required "$1" "$2" "$3" "$4" "$5" || _ die
    local cmd="$1"
    shift

    if _ includes Builds "$4"
    then
        "${cmd}" "$@"
    fi
}

put ()
{
    _ required "$1" "$2" "$3" "$4"  || _ die

    urls+=($1)
    tags+=($2)
    references+=($3)
    versions+=($4)
}

setmtimes ()
(
    local files
    local f
    local stamp
    local touchFormat

    IFS=$'\n'
    files=( $({ git ls-files | xargs -n1 dirname | sort -u && git ls-files; } | sort -r) )
    unset IFS

    for f in "${files[@]}"; do
        if [ ! -e "$f" ]; then
            # don't try touching files that don't exist
            continue
        fi
        stamp="$(git --no-pager log -1 --format='format:%ai' -- "$f")"
        touchFormat="$(date --date="$stamp" +'%Y%m%d%H%M.%S')"
        touch --no-dereference -t "$touchFormat" "$f"
    done
)

clone ()
{
    _ required "$1" "$2" "$3" || return 1

    (
        if _ truth MANAGE_BUILD_DEBUG
        then
            set -x # Debug
        fi

        cd "$2"    || return 1

        if [[ -d "$2/repository" ]]
        then
            rm -rf "$2/repository"
        fi

        _ retry "3"                 \
          git clone                 \
          --recursive "$1"          \
          repository                || return 1

        cd "$2/repository"          || return 1
        git reset -q HEAD           || return 1
        git checkout -q -- .        || return 1
        git clean -dfxq             || return 1
        git checkout -q "$3" --     || return 1
        setmtimes > /dev/null 2>&1  || true
    )
}

cleanup ()
{
    _ required "$1" || _ die

    [ -d "$1" ] && temporary+=("$1")
}

getsink () {
    local line

    while read -r line
    do
        if _ truth "${MANAGE_BUILD_DEBUG}"
        then
            echo "......... ${line}"
            echo "${line}" >> "${dir}/log"
        else
            echo "${line}" >> "${dir}/log"
        fi
    done
}

build ()
{
    local url="${urls[$1]}"
    local tag="${tags[$1]}"
    local reference="${references[$1]}"
    local version="${versions[$1]}"
    local key
    local dir

    key="$(echo "${url}" "${tag}" "${reference}" "${version}" | md5sum)"
    key="manage.${key:0:32}"

    dir="$(tempdir "${key}")"
    cleanup "${dir}"

    mkdir "${dir}/artifacts"
    touch "${dir}/log"

    _ required  "${url}"       \
                "${tag}"       \
                "${reference}" \
                "${version}"   ||
                return 1

    cleanupenv

    export MANAGE_BUILD="true"
    export MANAGE_BUILD_URL="${url}"
    export MANAGE_BUILD_TAG="${tag}"
    export MANAGE_BUILD_VERSION="${version}"
    export MANAGE_BUILD_DIRECTORY="${dir}"
    export MANAGE_BUILD_REFERENCE="${reference}"
    export MANAGE_BUILD_ARTIFACTS="${dir}/artifacts"

    if [[ "${version}" != "edge" ]]
    then
        clone "${url}"              \
              "${dir}"              \
              "${reference}" 2>&1   |
              getsink              ||
              return 1
    else
        export MANAGE_BUILD_EDGE="true"
        cp -rf "${url}" "${dir}/repository"
    fi

    if _ truth "$(yml assemble_internal || echo "false")"
    then
        (
            if _ truth MANAGE_BUILD_DEBUG
            then
                set -x # Debug
            fi

            cd "${dir}" || return 1

            bash --norc                           \
                 --noprofile                      \
                 -c "repository/bin/manage build" \
                 2>&1                             |
                 getsink                         ||
                 return $?
        ) || return "$?"
    else
        #TODO: Download manage and run the scripts
        true
    fi

    # echo "${tag}" "${reference}" "${version}" "${url}"
}

tempdir ()
{
    local tempdir

    tempdir="$(dirname "$(mktemp -u)")/$1"

    [[ -d "${tempdir}" ]] && rm -rf "${tempdir}"

    mkdir -p "${tempdir}"

    if [[ ! -d "${tempdir}" ]]
    then
        _ die "Could not create temporary directory."
    fi

    echo "${tempdir}"
}

getmanifest () {
    local manifest
    local manageversions
    manageversions="$(manage versions)"
    manifest="$(echo "${manageversions}"   | grep -vE '^#|^\s*$')"

    if [ -z "${manifest}" ]
    then
        _ die "Cannot process the version manifets."
    else
        echo "${manifest}"
    fi
}

getmaintainer () {
    local manifest="$1"

    MANAGE_BUILD_MAINTAINER="$(echo "${manifest}" | head -n 1)"
    export MANAGE_BUILD_MAINTAINER
}


getcriteria () {
    MANAGE_BUILD_CRITERIA="$(yml assemble_by || echo "versions")"

    if [[ "${MANAGE_BUILD_CRITERIA}" == "tags"     ]] ||
       [[ "${MANAGE_BUILD_CRITERIA}" == "versions" ]]
    then
        export MANAGE_BUILD_CRITERIA
    else
        _ die "Unknown value of 'assemble by:' in .manage.yml."
    fi
}

getartifacts () {
    local manifest="$1"
    local key
    key="$(echo "${manifest}" | md5sum)"
    key="manage.${key:0:32}"
    key="$(tempdir "${key}")"
    if [ -d "${key}" ]
    then
        echo "${key}"
    else
        _ die "Cannot create temporary directory."
    fi
}

processmanifest () {
    local manifest="$1"
    if _ includes Builds "edge"
    then
        put "${MANAGEREPOSITORY}" "edge" "edge" "edge"
    fi

    parse "${manifest}" filter put

    if [[ "${MANAGE_BUILD_CRITERIA}" == "versions" ]]
    then

        local i
        local t
        for i in "${!versions[@]}"
        do
            local list=()
            for t in "${!tags[@]}"
            do
                if [[ "${versions[i]}" == "${versions[t]}" ]]
                then
                    if [ ! -z "${tags[t]}" ]
                    then
                        list+=( "${tags[t]}" )
                    fi
                fi
            done
            tags[i]="$(_ join list ' ')"
        done
    fi
}

processbuild () {
    local manifest="$1"

    local artifacts
    local preserve

    artifacts="$(getartifacts "${manifest}")"
    preserve="$(yml assemble_preserve || echo "false")"

    local array
    local processed
    local success
    local criteria
    local index
    local code

    code=0
    array="${MANAGE_BUILD_CRITERIA}[@]"
    index=0
    processed=()

    for criteria in "${!array}"
    do
        if _ includes processed "${criteria}"
        then
            (( ++index ))
            continue
        else
            processed+=("${criteria}")
        fi

        success=true

        _ info "Builing '${criteria}'."

        build "${index}" || success=false

        if _ truth "${success}"
        then
            _ info "Done. Build '${criteria}' exited with 0."

            buildtrue "${preserve}"              \
                      "${artifacts}/${criteria}" || true
        else
            (( ++code ))

            _ error "Failed to build '${criteria}'."

            buildfalse "${preserve}"              \
                       "${artifacts}/${criteria}" || true
        fi

        (( ++index ))
    done

    if _ truth "${preserve}"
    then
        _ info "Build artifacts at '${artifacts}'"
    else
        cleanup "${artifacts}"
    fi

    return "${code}"
}

preserve () {
    local target="$1"

    if [[ -d "${MANAGE_BUILD_ARTIFACTS}" ]]
    then
        cp -rf "${MANAGE_BUILD_ARTIFACTS}" "${target}" || true
        if [ -f "${MANAGE_BUILD_DIRECTORY}/log" ]
        then
            cp -f "${MANAGE_BUILD_DIRECTORY}/log" "${target}/.log"
        fi
    fi
}

buildfalse () {
    local preserve="$1"
    local target="$2"

    if _ truth "${preserve}"
    then
        preserve "$target"
    fi

    if [ -f "${MANAGE_BUILD_DIRECTORY}/log" ] &&
       ! _ truth "${MANAGE_BUILD_DEBUG}"
    then
        sed "{s/^/......... /}" \
            "${MANAGE_BUILD_DIRECTORY}/log"
    fi
}

buildtrue () {
    local preserve="$1"
    local target="$2"

    if _ truth "${preserve}"
    then
        preserve "$target"
    fi
}

main ()
{
    strict  true
    verbose true

    urls=()
    tags=()
    versions=()
    temporary=()
    references=()

    eval "$(_ yaml "${MANAGEREPOSITORY}/.manage.yml" yml)"

    #shellcheck disable=SC2034
    Builds=($(yml assemble_versions   || echo ""))

    local manifest
    manifest="$(getmanifest)"

    getmaintainer "${manifest}"
    getcriteria

    processmanifest "${manifest}"
    processbuild "${manifest}"

    ###
}

cleanupenv () {
    unset MANAGE_BUILD
    unset MANAGE_BUILD_URL
    unset MANAGE_BUILD_TAG
    unset MANAGE_BUILD_EDGE
    unset MANAGE_BUILD_VERSION
    unset MANAGE_BUILD_CRITERIA
    unset MANAGE_BUILD_DIRECTORY
    unset MANAGE_BUILD_REFERENCE
    unset MANAGE_BUILD_ARTIFACTS
    unset MANAGE_BUILD_MAINTAINER
}

cleanuptmp () {
    local dir
    for dir in "${temporary[@]}"
    do
        [ -d "$dir" ] && rm -rf "$dir"
    done
}

onexit ()
{
    _ info "Removing temporary files and directories."
    cleanuptmp

    _ info "Cleaning environment variables."
    cleanupenv

    if (( $1 == 0 ))
    then
        _ warn "Done. All builds exited with 0."
    else
        _ error "Done. $1 build(s) failed."
    fi
}

