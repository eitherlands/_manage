#!/usr/bin/env manage
#
# vim: set ft=sh:
#
# <doc>
#
# Build every version in
# the repository manifest
#
# </doc>
#
# <import>
#
# collection-shell
# collection-message
# collection-string
# collection-yaml
#
# </import>
#
# <dependency>
#
# git
# awk
#
# </dependency>

parse () {
    local url
    local tag
    local reference
    local version
    local manifest
    local line

    local _reference
    local _line

    local OIFS="${IFS}"
    local IFS=$'\n'
    manifest=($1)
    IFS="${OIFS}"
    shift

    for line in "${manifest[@]}"
    do
        tag="$(echo "$line" | awk -F ': +' '{ print $1 }')"

        _line="$(echo "$line" | awk -F ': +' '{ print $2 }')"
        url="${_line%%@*}"
        # url="${url#*://}"
        # url="${url%/}"
        # url="${url%.git}"
        # url="${url%/}"

        _reference="${_line#*@}"

        reference="${_reference%% *}"
        version="${_reference#* }"

        if [ "$version" = "$_reference" ]
        then
            version=
        fi

        "$@" "${url}" "${tag}" "${reference}" "${version}"
    done
}

filter () {
    _ required "$1" "$2" "$3" "$4" "$5" || _ die
    local cmd="$1"
    shift

    if _ includes builds "$4"
    then
        if [[ "${criteria}" == "versions" ]]
        then
            if ! _ includes versions "$4"
            then
                "${cmd}" "$@"
            fi
        else
            "${cmd}" "$@"
        fi
    fi
}

put ()
{
    _ required "$1" "$2" "$3" "$4"  || _ die

    urls+=($1)
    tags+=($2)
    references+=($3)
    versions+=($4)
}

setmtimes ()
(
    local files
    local f
    local stamp
    local touchFormat

    IFS=$'\n'
    files=( $({ git ls-files | xargs -n1 dirname | sort -u && git ls-files; } | sort -r) )
    unset IFS

    for f in "${files[@]}"; do
        if [ ! -e "$f" ]; then
            # don't try touching files that don't exist
            continue
        fi
        stamp="$(git --no-pager log -1 --format='format:%ai' -- "$f")"
        touchFormat="$(date --date="$stamp" +'%Y%m%d%H%M.%S')"
        touch --no-dereference -t "$touchFormat" "$f"
    done
)

clone ()
{
    _ required "$1" "$2" "$3" || return 1

    (
        #set -x # Debug

        cd "$2"    || return 1

        if [[ -d "$2/repository" ]]
        then
            rm -rf "$2/repository"
        fi

        _ retry "${tries}" git clone --quiet --recursive "$1" repository
        cd "$2/repository"          || return 1
        git reset -q HEAD           || return 1
        git checkout -q -- .        || return 1
        git clean -dfxq             || return 1
        git checkout -q "$3" --     || return 1
        setmtimes > /dev/null 2>&1
    ) > /dev/null 2>&1

}

cleanup ()
{
    _ required "$1" || _ die

    [ -d "$1" ] && temporary+=("$1")
}

build ()
{
    local url="${urls[$1]}"
    local tag="${tags[$1]}"
    local reference="${references[$1]}"
    local version="${versions[$1]}"
    local key
    local dir

    key="$(echo "${url}" "${tag}" "${reference}" "${version}" | md5sum)"
    key="manage.${key:0:32}"

    dir="$(tempdir "${key}")"
    cleanup "${dir}"

    _ required  "${url}"       \
                "${tag}"       \
                "${reference}" \
                "${version}"   ||
                return 1

    unset MANAGE_BUILD
    unset MANAGE_BUILD_WIP
    unset MANAGE_BUILD_URL
    unset MANAGE_BUILD_TAG
    unset MANAGE_BUILD_VERSION
    unset MANAGE_BUILD_REFERENCE
    unset MANAGE_BUILD_MAINTAINER

    if [[ "${version}" != "wip" ]]
    then
        _ info "Cloning '${url} ${reference}'."
        clone "${url}" "${dir}" "${reference}" || return 1
    else
        export MANAGE_BUILD_WIP="true"
        _ info "Copying '${url}'."
        cp -rf "${url}" "${dir}/repository"
    fi

    export MANAGE_BUILD="true"
    export MANAGE_BUILD_URL="${url}"
    export MANAGE_BUILD_TAG="${tag}"
    export MANAGE_BUILD_VERSION="${version}"
    export MANAGE_BUILD_REFERENCE="${reference}"
    export MANAGE_BUILD_MAINTAINER

    if _ truth "$(yml assemble_internal || echo "false")"
    then
        (
            cd "${dir}" || return 1
            bash --norc --noprofile -c "repository/bin/manage build" || return $?
        )
    else
        # Download manage and run the scripts
        true
    fi

    # echo "${tag}" "${reference}" "${version}" "${url}"
}

tempdir ()
{
    local tempdir

    tempdir="$(dirname "$(mktemp -u)")/$1"
    mkdir -p "${tempdir}"

    if [[ ! -d "${tempdir}" ]]
    then
        _ die "Could not create temporary directory."
    fi

    echo "${tempdir}"
}

proceed () {
    local code=0
    local i="$1"

    build "${i}" || code=$?

    if [[ "${code}" == "0" ]]
    then
        _ info "Successfully assembled $2."
    else
        _ error "Failed to assemble $2."
    fi

    return "${code}"
}

main ()
{
    strict  true
    verbose true

    local i
    local manageversions
    local manifest
    local tries="3"
    local code=0

    urls=()
    tags=()
    references=()
    versions=()
    temporary=()
    criteria=

    eval "$(_ yaml "${MANAGEREPOSITORY}/.manage.yml" yml)"
    criteria="$(yml assemble_by || echo "versions")"

    #shellcheck disable=SC2034
    builds=($(yml assemble_versions || echo ""))


    if [[ "${criteria}" == "tags"     ]] ||
       [[ "${criteria}" == "versions" ]]
    then
        manageversions="$(manage versions)"
        manifest="$(echo "${manageversions}" | grep -vE '^#|^\s*$')"

        MANAGE_BUILD_MAINTAINER="$(echo "${manageversions}" | head -n 1)"

        if _ includes builds "wip"
        then
            put "${MANAGEREPOSITORY}" "wip" "wip" "wip"
        fi

        parse "${manifest}" filter put

        local array="${criteria}[@]"
        local index=0

        for i in "${!array}"
        do
            proceed "${index}" "${i}" || code=$(( code + $? ))
            (( ++index ))
        done
    else
        _ die "Unknown value of 'assemble by:' in .manage.yml."
    fi


    return "${code}"
}

onexit ()
{
    local dir
    _ info "Removing temporary files and directories."
    for dir in "${temporary[@]}"
    do
        [ -d "$dir" ] && rm -rf "$dir"
    done

    _ info "Cleaning environment variables."
    unset MANAGE_BUILD
    unset MANAGE_BUILD_URL
    unset MANAGE_BUILD_TAG
    unset MANAGE_BUILD_VERSION
    unset MANAGE_BUILD_REFERENCE
    unset MANAGE_BUILD_MAINTAINER

    if (( $1 == 0 ))
    then
        _ warn "Exiting!"
    else
        _ error "An error with exit code \"$1\" has occured."
    fi
}

