#!/usr/bin/env bash
#
# vim: set ft=sh:
#
# <doc>
#
# Create the repository version manifest
#
# </doc>
#
# Instruction format:
#
# <tag>: <git-url>@<git-commit-id>
#
# <import>
#
# collection-shell
# collection-message
# collection-string
# collection-yaml
#
# </import>
#
# <dependency>
#
# git
# curl
#
# </dependency>

# if exists curl; then
#     curl='curl -sSL'
# elif exists wget; then
#     curl='wget -qO-'
# elif exists busybox && busybox --list-modules | grep -q wget; then
#     curl='busybox wget -qO-'
# fi

importkey () {
    local key="$1"
    if _ required "${key}"
    then
        if [[ "${key}" =~ ^https://. ]]
        then
            # wget --https-only          \
            #     --secure-protocol=PFS  \
            #     -t 5 -nc -qO- "${key}" |
            curl -sSL "${key}"         |
                gpg --import           \
                > /dev/null 2>&1       ||
                return $?
        else
            return 1
        fi
    else
        return 1
    fi
}

verify () {
    _ required "$1" ||
        return 1
    local verify

    verify="$(yml versions_verify || echo "false")"

    local regex='^v[0-9]\.[0-9]\.[0-9]$'

    if  [[ "$1" =~ ${regex} ]]                         &&
        git show -q "$1":.manage.yml  > /dev/null 2>&1 &&
        git show -q "$1":script/build > /dev/null 2>&1
    then
        if _ truth "${verify}"
        then
            git tag -v  "$1"              > /dev/null 2>&1
        else
            return 0
        fi
    else
        return 1
    fi
}

getversions ()
{
    _ required "$1" || echo
    if declare -f "yml" > /dev/null 2>&1
    then
        local keys
        local key
        keys="$(yml __keys || echo)"
        for key in ${keys}
        do
            if [[ "${key}" =~ ^versions_versions_.* ]] &&
               [[ "$(yml "${key}" || echo)" == "$1" ]]
            then
                echo "${key#versions_versions_}"
            fi
        done
    fi
}

main ()
{
    verbose true
    strict true

    local va
    local url
    local key
    local tag
    local tags
    local index
    local verify
    local commit
    local filter
    local aliases
    local versions
    local maintainer
    local versionaliases

    index=0
    filter=($@)
    CWD="$(pwd)"

    _ required "${MANAGEREPOSITORY}"                        ||
        _ die

    cd "${MANAGEREPOSITORY}"                                ||
        _ die

    [ -f "${MANAGEREPOSITORY}/.manage.yml" ]                ||
        _ die "${MANAGEREPOSITORY}/.manage.yml does not exist."

    git rev-parse --is-inside-work-tree > /dev/null 2>&1    ||
        _ die "${MANAGEREPOSITORY} is not a git repository."

    eval "$(_ yaml "${MANAGEREPOSITORY}/.manage.yml" yml)"

    key="$(yml versions_key               || echo "")"
    url="$(yml versions_url               || echo "")"
    maintainer="$(yml versions_maintainer || echo "")"

    if ! _ required "${url}"
    then
        url="$(git config --get remote.origin.url || echo "")"
        _ required "${url}"                                 ||
            _ die "Define the repository url in .manage.yml."
    fi

    if _ truth "$(yml versions_verify || echo "false")"
    then
        _ exists "gpg"                                      ||
            _ die "gpg (GnuPG) is required for verification."

        importkey "${key}"                                  ||
            _ die "Define the repository gpg public key url in .manage.yml."
    fi

    _ required "${maintainer}"                              ||
        _ die "Define the repository maintainer in .manage.yml."

    tags=($(git tag -l))
    versions=()

    for tag in "${tags[@]}"
    do
        if verify "${tag}"
        then
            if [ -z "${filter[*]}" ]
            then
                versions+=("${tag}")
            else
                if _ includes filter "${tag#?}"
                then
                    versions+=("${tag}")
                fi
            fi
        fi
    done

    echo "# maintainer: ${maintainer}"

    for version in "${versions[@]}"
    do
        commit="$(git rev-list "${version}" -n 1 | head -n 1)"
        version="${version#?}"
        aliases=($(getversions "${version}"))
        versionaliases=( "${version}" ${aliases[@]} )

        index=$((index+1))
        if [[ "${index}" == "${#versions[@]}" ]] &&
           [[ -z "${filter[*]}" ]]
        then
            versionaliases+=("latest")
        fi

        echo
        for va in "${versionaliases[@]}"
        do
            if [ -n "${va}" ]
            then
                echo "${va}: ${url}@${commit} ${version}"
            fi
        done
    done
}

onexit ()
{
    cd "${CWD}" || exit "$1"
}

