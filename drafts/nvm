#!/bin/sh
set -e

{ # this ensures the entire script is downloaded #

    manage_has() {
        command -v "$@" > /dev/null 2>&1
    }

    if [ -z "$MANAGE_DIR" ]; then
        MANAGE_DIR="$HOME/.manage"
    fi

    manage_latest_version() {
        echo "v0.29.0"
    }

    manage_source() {
        local MANAGE_SOURCE_URL="https://github.com/creationix/nvm.git"
        echo "$MANAGE_SOURCE_URL"
    }

    install_manage_from_git() {
        if [ -d "$MANAGE_DIR/.git" ]; then
            echo "==> manage is already installed in $MANAGE_DIR, trying to update using git."
            printf "\r==> "
            cd "$MANAGE_DIR" && (command git fetch 2> /dev/null || {
            echo >&2 "Failed to update manage, run 'git fetch' in $MANAGE_DIR yourself." && exit 1
        })
    else
        # Cloning to $MANAGE_DIR
        echo "==> Downloading manage from git to '$MANAGE_DIR'"
        printf "\r==> "
        mkdir -p "$MANAGE_DIR"
        command git clone "$(manage_source git)" "$MANAGE_DIR"
    fi
    cd "$MANAGE_DIR" && command git checkout --quiet "$(manage_latest_version)"
    if [ ! -z "$(cd "$MANAGE_DIR" && git show-ref refs/heads/master)" ]; then
        if git branch --quiet 2>/dev/null; then
            cd "$MANAGE_DIR" && command git branch --quiet -D master >/dev/null 2>&1
        else
            echo >&2 "Your version of git is out of date. Please update it!"
            cd "$MANAGE_DIR" && command git branch -D master >/dev/null 2>&1
        fi
    fi
    return
}

# Detect profile file if not specified as environment variable
# (eg: PROFILE=~/.myprofile)
# The echo'ed path is guaranteed to be an existing file
# Otherwise, an empty string is returned

manage_detect_profile() {
    local DETECTED_PROFILE
    DETECTED_PROFILE=''
    local SHELLTYPE
    SHELLTYPE="$(basename "/${SHELL}")"

    if [ "${SHELLTYPE}" = "bash" ]; then
        if [ -f "$HOME/.bashrc" ]; then
            DETECTED_PROFILE="$HOME/.bashrc"
        elif [ -f "$HOME/.bash_profile" ]; then
            DETECTED_PROFILE="$HOME/.bash_profile"
        fi
    elif [ "${SHELLTYPE}" = "zsh" ]; then
        DETECTED_PROFILE="$HOME/.zshrc"
    fi

    if [ -z "${DETECTED_PROFILE}" ]; then
        if [ -f "$PROFILE" ]; then
            DETECTED_PROFILE="$PROFILE"
        elif [ -f "$HOME/.profile" ]; then
            DETECTED_PROFILE="$HOME/.profile"
        elif [ -f "$HOME/.bashrc" ]; then
            DETECTED_PROFILE="$HOME/.bashrc"
        elif [ -f "$HOME/.bash_profile" ]; then
            DETECTED_PROFILE="$HOME/.bash_profile"
        elif [ -f "$HOME/.zshrc" ]; then
            DETECTED_PROFILE="$HOME/.zshrc"
        fi
    fi

    if [ ! -z "${DETECTED_PROFILE}" ]; then
        echo "${DETECTED_PROFILE}"
    fi
}

manage_do_install() {
    if [ -z "$METHOD" ]; then
        # Autodetect install method
        if manage_has "git"; then
            install_manage_from_git
            # elif manage_has "manage_download"; then
            #   install_manage_as_script
            # else
            #   echo >&2 "You need git, curl, or wget to install manage."
            #   exit 1
        fi
    elif [ "~$METHOD" = "~git" ]; then
        if ! manage_has "git"; then
            echo >&2 "You need git to install manage."
            exit 1
        fi
        install_manage_from_git
        # elif [ "~$METHOD" = "~script" ]; then
        #   if ! manage_has "manage_download"; then
        #     echo >&2 "You need curl or wget to install manage."
        #     exit 1
        #   fi
        #   install_manage_as_script
    fi

    echo

    local MANAGE_PROFILE
    MANAGE_PROFILE=$(manage_detect_profile)

    SOURCE_STR="\nexport MANAGE_DIR=\"$MANAGE_DIR\"\n[ -s \"\$MANAGE_DIR/nvm.sh\" ] && . \"\$MANAGE_DIR/nvm.sh\"  # This loads manage"

    if [ -z "$MANAGE_PROFILE" ] ; then
        echo "==> Profile not found. Tried $MANAGE_PROFILE (as defined in \$PROFILE), ~/.bashrc, ~/.bash_profile, ~/.zshrc, and ~/.profile."
        echo "==> Create one of them and run this script again"
        echo "==> Create it (touch $MANAGE_PROFILE) and run this script again"
        echo "   OR"
        echo "==> Append the following lines to the correct file yourself:"
        printf "$SOURCE_STR"
        echo
    else
        if ! command grep -qc 'libexec/manage' "$MANAGE_PROFILE"; then
            echo "==> Appending source string to $MANAGE_PROFILE"
            printf "$SOURCE_STR\n" >> "$MANAGE_PROFILE"
        else
            echo "==> Source string already in $MANAGE_PROFILE"
        fi
    fi

    echo "==> Close and reopen your terminal to start using manage"
    manage_reset
}

#
# Unsets the various functions defined
# during the execution of the install script
#
manage_reset() {
    unset -f manage_reset manage_has manage_latest_version \
        manage_source manage_download install_manage_as_script install_manage_from_git \
        manage_detect_profile manage_do_install
}

[ "_$MANAGE_ENV" = "_testing" ] || manage_do_install

# wrapped up in a function so that we have some protection against only getting
# half the file during "curl | sh"
}
