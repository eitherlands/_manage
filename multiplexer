#!/usr/bin/env bash

# <doc>
#
# _manage is a model for setting up shell programs that use
# subcommands.
#
# For more details on how to define your own commands look
# online at https://github.com/eitherlands/_manage
#
# </doc>

#
# Configuration Options

[ -z "$MANAGEDIRECTORY" ]        && MANAGEDIRECTORY="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
[ -z "$MANAGEPATH" ]             && MANAGEPATH="${MANAGEDIRECTORY}/multiplexer"
[ -z "$MANAGEOPWD" ]             && MANAGEOPWD="${PWD}"

_exit () {
    local code=${1:-0}
    _cleanup
    if [ -d "${MANAGEOPWD}" ]
    then
        cd "${MANAGEOPWD}" || true
    fi

    unset exit
    exit "${code}" > /dev/null 2>&1
}

alias exit="_exit"

_cleanup () {
    unset MANAGEPATH
    unset MANAGETOPIC
    unset MANAGEIMPORTS
    unset MANAGEVERBOSE
    unset MANAGEDIRECTORY
    unset MANAGEOPWD
}

_import()
{
    local path
    local requirements="$1"
    path="$(cd "${MANAGEDIRECTORY}"/common || exit "$?" ; pwd)"
    local OPWD=$PWD ; cd "${path}" || exit "$?"
    for file in "${path}"/*
    do
        if [   -f "${file}" ] &&
           [   -r "${file}" ] &&
           [ ! -L "${file}" ] &&
           [[ "$(basename "${file}")" =~ ^[-a-zA-Z]*$ ]]
        then
            for requirement in ${requirements[*]}
            do
                if [[ "${requirement}" == "$(basename "${file}")" ]]
                then
                    source "${file}" > /dev/null 2>&1
                fi
            done
        fi
    done
    cd "${OPWD}" || exit "$?"
}

_managemultiplexer ()
{
    local bd
    local sd
    bd="$(dirname "$1")"
    sd="${bd}/$3"
    ps="${MANAGEDIRECTORY}/script"

    [ ! -d "${bd}" ] && exit 1
    [ ! -d "${ps}" ] && exit 1
    [ ! -d "${sd}" ] && _die "Directory \"${sd}\" does not exist."

    if [[ ! ${sd} == "${ps}" ]]
    then
        _harvest "${ps}" "_manage_"
    fi

    _harvest "${sd}"
}

if [[ "${BASH_SOURCE[0]}" != "${0}" ]]
then
    if [ -f "$(pwd)/${BASH_SOURCE[0]}" ]
    then
        echo "$(pwd)/${BASH_SOURCE[0]}"
    else
        _import "${MANAGEIMPORTS[@]}"
    fi
else
    _import "collection-manage"
    _enableStrictMode
    _catchExceptions
    _managemultiplexer "$@"
    shift 3
    unset options
    unset OPTIND
    while getopts ":h:?v" options "$@"; do
        _flags "$options"
    done && shift $((OPTIND - 1))
    unset OPTIND
    unset options

    [ "$1" = "--" ] && shift
    _run "$@"
fi
